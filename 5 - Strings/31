 /*31. Fac¸a um programa que contenha um menu com as seguintes opc¸oes: ˜
(a) Ler uma string S1 (tamanho maximo 20 caracteres); ´
(b) Imprimir o tamanho da string S1;
(c) Comparar a string S1 com uma nova string S2 fornecida pelo usuario e imprimir o ´
resultado da comparac¸ao; ˜
(d) Concatenar a string S1 com uma nova string S2 e imprimir na tela o resultado da
concatenac¸ao; ˜
(e) Imprimir a string S1 de forma reversa;
(f) Contar quantas vezes um dado caractere aparece na string S1. Esse caractere
desse ser informado pelo usuario; ´
(g) Substituir a primeira ocorrencia do caractere C1 da string S1 pelo caractere C2. Os ˆ
caracteres C1 e C2 serao lidos pelo usu ˜ ario; ´
(h) Verificar se uma string S2 e substring de S1. A string S2 deve ser informada pelo ´
usuario; ´
(i) Retornar uma substring da string S1. Para isso o usuario deve informar a partir de ´
qual posic¸ao deve ser criada a substring e qual ˜ e o tamanho da substring. */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

void limpar_buffer() {
    int c;
    while ((c = getchar()) != '\n' && c != EOF);
}

int main() {
    char opcao;
    char S1[20] = "";
    char S2[20] = "";

    while (1) {
        printf("\n--- Menu de Opcoes ---\n");
        printf("(a) Ler uma string S1 (tamanho maximo 20 caracteres)\n");
        printf("(b) Imprimir o tamanho da string S1\n");
        printf("(c) Comparar a string S1 com uma nova string S2\n");
        printf("(d) Concatenar a string S1 com uma nova string S2\n");
        printf("(e) Imprimir a string S1 de forma reversa\n");
        printf("(f) Contar quantas vezes um caractere aparece na string S1\n");
        printf("(g) Substituir a primeira ocorrencia do caractere C1 por C2\n");
        printf("(h) Verificar se S2 é substring de S1\n");
        printf("(i) Retornar uma substring de S1\n");
        printf("0) Sair\n");
        printf("Escolha uma opcao: ");

        scanf(" %c", &opcao);
        limpar_buffer();

        switch (opcao) {
            case 'a':
                printf("Informe a string S1: ");
                fgets(S1, sizeof(S1), stdin);
                S1[strcspn(S1, "\n")] = '\0';
                break;
            case 'b':
                printf("Tamanho da string S1: %zu\n", strlen(S1));
                break;
            case 'c':
                printf("Informe a string S2 para comparar: ");
                fgets(S2, sizeof(S2), stdin);
                S2[strcspn(S2, "\n")] = '\0';
                if (strcmp(S1, S2) == 0) {
                    printf("As strings sao iguais.\n");
                } else if (strcmp(S1, S2) > 0) {
                    printf("A string S1 e maior que a string S2.\n");
                } else {
                    printf("A string S2 e maior que a string S1.\n");
                }
                break;
            case 'd':
                printf("Informe a string S2 para concatenar: ");
                fgets(S2, sizeof(S2), stdin);
                S2[strcspn(S2, "\n")] = '\0';
                strncat(S1, S2, sizeof(S1) - strlen(S1) - 1);
                printf("String concatenada: %s\n", S1);
                break;
            case 'e':
                if (strlen(S1) == 0) {
                    printf("A string S1 esta vazia.\n");
                    break;
                }
                printf("String S1 de forma reversa: ");
                for (int i = strlen(S1) - 1; i >= 0; i--) {
                    printf("%c", S1[i]);
                }
                printf("\n");
                break;
            case 'f':
                printf("Informe o caractere a ser contado: ");
                char caractere;
                scanf(" %c", &caractere);
                limpar_buffer();
                int contador = 0;
                for (int i = 0; S1[i] != '\0'; i++) {
                    if (S1[i] == caractere) {
                        contador++;
                    }
                }
                printf("O caractere '%c' aparece %d vezes na string S1.\n", caractere, contador);
                break;
            case 'g':
                if (strlen(S1) == 0) {
                    printf("A string S1 esta vazia.\n");
                    break;
                }
                char c1, c2;
                printf("Informe o caractere a ser substituido (C1): ");
                scanf(" %c", &c1);
                limpar_buffer();
                printf("Informe o novo caractere (C2): ");
                scanf(" %c", &c2);
                limpar_buffer();
                char *ptr = strchr(S1, c1);
                if (ptr != NULL) {
                    *ptr = c2;
                    printf("String S1 apos a substituicao: %s\n", S1);
                } else {
                    printf("O caractere C1 nao foi encontrado na string S1.\n");
                }
                break;
            case 'h':
                if (strlen(S1) == 0) {
                    printf("A string S1 esta vazia. Por favor, leia uma string primeiro.\n");
                    break;
                }
                printf("Informe a string S2 para verificar se e uma substring de S1: ");
                fgets(S2, sizeof(S2), stdin);
                S2[strcspn(S2, "\n")] = '\0';
                if (strstr(S1, S2) != NULL) {
                    printf("A string S2 E uma substring de S1.\n");
                } else {
                    printf("A string S2 NAO e uma substring de S1.\n");
                }
                break;
            case 'i':
                if (strlen(S1) == 0) {
                    printf("A string S1 esta vazia. Por favor, leia uma string primeiro.\n");
                    break;
                }
                int inicio, tamanho;
                printf("Informe a posicao de inicio da substring: ");
                scanf("%d", &inicio);
                printf("Informe o tamanho da substring: ");
                scanf("%d", &tamanho);
                limpar_buffer();
                if (inicio < 0 || inicio >= strlen(S1) || inicio + tamanho > strlen(S1)) {
                    printf("Posicao ou tamanho invalidos.\n");
                } else {
                    char *sub = (char *)malloc((tamanho + 1) * sizeof(char));
                    if (sub != NULL) {
                        strncpy(sub, S1 + inicio, tamanho);
                        sub[tamanho] = '\0';
                        printf("A substring e: %s\n", sub);
                        free(sub);
                    } else {
                        printf("Erro de alocacao de memoria.\n");
                    }
                }
                break;
            case '0':
                return 0;
            default:
                printf("Opcao invalida. Tente novamente.\n");
        }
    }
    return 0;
}
